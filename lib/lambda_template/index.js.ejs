'use strict'
var serialize = require('node-serialize');
<% Object.keys(requireVars).forEach(function(varName) { %>
var <%- varName %> = require('<%- requireVars[varName] %>');
<% }); %>

var invokeNextLambda = function(data) {
  return new Promise(function(done, error) {
    var lambda = new aws.Lambda({ region: '<%- region %>' }),
        params = {
          FunctionName: '<%- nextLambdaName %>',
          InvocationType: 'Event',
          Payload: JSON.stringify({ data: data })
        };

    lambda.invoke(params, function(err, data) {
      if (err) {
        console.log('Failed invocation ' + params.FunctionName);
        console.log(err, err.stack);
        error(err);
      }
      else if (data.FunctionError) {
        console.log('Failed invocation ' + params.FunctionName);
        console.log(data.FunctionError);
        error(data.FunctionError);
      }
      else {
        console.log(data);
        done(data);
      }
    });
  });
};

exports.handler = function(event, context) {
  var environment = serialize.unserialize(<%- serializedEnvironment %>),
      func = <%- serializedLambdaEntry %>,
      data = undefined,
      deffers = [Promise.resolve()],
      pall = null;

  <% Object.keys(requireVars).forEach(function(varName) { %>
  environment.<%- varName %> = <%- varName %>;
  <% }); %>
  try { 
    data = event.data;
    if (!Array.isArray(data)) {
      data = [data]
    }
    environment.__context = context;
    data.forEach(function(line) { 
                   var result = func.call(environment, line);
                   <% if (nextLambdaName !== null) { %>
                   deffers.push(invokeNextLambda(result));
                   <% } %>
                 });
  }
  catch(e) {
    context.fail(e);
  }
  pall = Promise.all(deffers);
  pall
    .then(function(data) {
      context.succeed('Processed: <%- lambdaName %>, processed data num: ' + data.length);
    })
    .catch(function(err) {
      context.fail(e);
    });
};

